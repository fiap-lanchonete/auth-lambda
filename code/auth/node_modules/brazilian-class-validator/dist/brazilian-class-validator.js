'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classValidator = require('class-validator');
var brazilianValues = require('brazilian-values');

var generateDecorator = function generateDecorator(validationFunc, name, message) {
  return function (validationOptions) {
    return function (object, propertyName) {
      classValidator.registerDecorator({
        name: name,
        target: object.constructor,
        propertyName: propertyName,
        options: Object.assign({
          message: message
        }, validationOptions),
        validator: {
          validate: function validate(value) {
            return validationFunc(String(value));
          }
        }
      });
    };
  };
};

/**
 * Check if value is a valid CEP.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Location {
 *   @IsCEP()
 *   cep: string;
 *
 *   constructor(cep: string) { this.cep = cep };
 * }
 *
 * const errors = await validate(new Location('50.833-000'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Location('02998-050'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Location('00000000'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Location('0'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Location('1982891928981982198'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsCEP = generateDecorator(brazilianValues.isCEP, 'isCEP', '$property must be a valid CEP');

/**
 * Check if value is a valid CNPJ.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Company {
 *   @IsCNPJ()
 *   cnpj: string;
 *
 *   constructor(cnpj: string) { this.cnpj = cnpj };
 * }
 *
 * const errors = await validate(new Company('41142260000189'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Company('45.723.174/0001-10'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Company('411407182'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Company('11.111.111/1111-11'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsCNPJ = generateDecorator(brazilianValues.isCNPJ, 'isCNPJ', '$property must be a valid CNPJ');

/**
 * Check if value is a valid CPF.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Person {
 *   @IsCPF()
 *   cpf: string;
 *
 *   constructor(cpf: string) { this.cpf = cpf };
 * }
 *
 * const errors = await validate(new Person('366.418.768-70'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Person('36641876870'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Person('213.198.013-20'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Person('2131201872781'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Person('11111111111'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsCPF = generateDecorator(brazilianValues.isCPF, 'isCPF', '$property must be a valid CPF');

/**
 * Check if a brazilian formatted date is valid.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Holyday {
 *   @IsDate()
 *   date: string;
 *
 *   constructor(date: string) { this.date = date };
 * }
 *
 * const errors = await validate(new Holyday('03/08/2017'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Holyday('28/13/2017'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Holyday('03-08-2017'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Holyday('31/03/18'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsDate = generateDecorator(brazilianValues.isDate, 'isDate', '$property must be a valid brazilian formatted date');

/**
 * Check if value is a valid DDD.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Phone {
 *   @IsDDD()
 *   ddd: string;
 *
 *   constructor(ddd: string) { this.ddd = ddd };
 * }
 *
 * const errors = await validate(new Phone('81'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Phone('10'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Phone('A#'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsDDD = generateDecorator(brazilianValues.isDDD, 'isDDD', '$property must be a valid DDD');

/**
 * Check if value is a valid brazilian phone number. It can check a wide
 * variety of formats optionally with DDI, DDD and the ninth digit.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class Phone {
 *   @IsPhone()
 *   number: string;
 *
 *   constructor(number: string) { this.number = number };
 * }
 *
 * const errors = await validate(new Phone('+55 (11) 9 8273-1182'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Phone('11 9 8273 1182'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Phone('1139723768'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new Phone('(23) 3972-3768'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Phone('(13) 6 5093-2093'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new Phone('(81) 555 178'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsPhone = generateDecorator(brazilianValues.isPhone, 'isPhone', '$property must be a valid phone');

/**
 * Check if a value is a valid CPF or CNPJ.
 * @example ```js
 * import { validate } from 'class-validator';
 *
 * class CompanyOwner {
 *   @IsCPFOrCNPJ()
 *   document: string;
 *
 *   constructor(document: string) { this.document = document };
 * }
 *
 * const errors = await validate(new CompanyOwner('366.418.768-70'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new CompanyOwner('36641876870'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new CompanyOwner('213.198.013-20'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new CompanyOwner('2131201872781'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new CompanyOwner('11111111111'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new CompanyOwner('41142260000189'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new CompanyOwner('45.723.174/0001-10'))
 * errors.length === 0
 * //=> true
 *
 * const errors = await validate(new CompanyOwner('411407182'))
 * errors.length === 0
 * //=> false
 *
 * const errors = await validate(new CompanyOwner('11.111.111/1111-11'))
 * errors.length === 0
 * //=> false
 * ```
 *
 * @see https://github.com/typestack/class-validator
 */

var IsCPFOrCNPJ = generateDecorator(brazilianValues.isCPFOrCNPJ, 'isCPFOrCNPJ', '$property must be a valid CPF or CNPJ');

exports.IsCEP = IsCEP;
exports.IsCNPJ = IsCNPJ;
exports.IsCPF = IsCPF;
exports.IsCPFOrCNPJ = IsCPFOrCNPJ;
exports.IsDDD = IsDDD;
exports.IsDate = IsDate;
exports.IsPhone = IsPhone;
